{"version":3,"file":"static/js/297.47a76d5f.chunk.js","mappings":"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","sources":["module/post/PostUpdate.js"],"sourcesContent":["import { collection, doc, getDoc, getDocs, query, updateDoc, where } from 'firebase/firestore';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport { Button } from '../../components/button';\r\nimport { Radio } from '../../components/checkbox';\r\nimport { Dropdown } from '../../components/dropdown';\r\nimport { Field, FieldCheckboxes } from '../../components/field';\r\nimport ImageUpload from '../../components/image/ImageUpLoad';\r\nimport { Input } from '../../components/input';\r\nimport { Label } from '../../components/label';\r\nimport Toggle from '../../components/toggle/Toggle';\r\nimport { db } from '../../firebase-app/firebase-config';\r\nimport useFirebaseImage from '../../hooks/useFirebaseImage';\r\nimport { postStatus } from '../../utils/constants';\r\nimport DashboardHeading from '../dashboard/DashboardHeading';\r\n\r\nimport axios from 'axios';\r\n\r\nimport ReactQuill, { Quill } from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { toast } from 'react-toastify';\r\n//Upload image trong react quill\r\nimport ImageUploader from 'quill-image-uploader';\r\nimport slugify from 'slugify';\r\nQuill.register('modules/imageUploader', ImageUploader);\r\n\r\n\r\n\r\nconst PostUpdate = () => {\r\n    const { control, handleSubmit, watch, setValue, getValues, reset, formState:{isValid, isSubmitting} } = useForm({\r\n        mode: 'onChange',\r\n        defaultValues: {\r\n            title: \"\",\r\n            slug: \"\",\r\n            status: 2,\r\n            author: \"\",\r\n            hot: false,\r\n            image: '',\r\n            category: {},\r\n            user: {}\r\n        },\r\n    })\r\n\r\n    //Load imgae trong react quill\r\n    const modules = useMemo(() => ({\r\n        toolbar: [\r\n            ['bold', 'italic', 'underline', 'strike'],\r\n            ['blockquote'],\r\n            [{ header: 1 }, { header: 2 }], // custom button values\r\n            [{ list: 'ordered' }, { list: 'bullet' }],\r\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n            ['link', 'image']\r\n        ],\r\n        imageUploader: {\r\n            upload: async (file) => {\r\n               const bodyFormData = new FormData();\r\n               bodyFormData.append('image', file);\r\n               const response = await axios({\r\n                method: 'post',\r\n                url: 'https://api.imgbb.com/1/upload?key=f7e3acfa6df95fd2479bacf8fcc90818',\r\n                data: bodyFormData,\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                },\r\n               });\r\n               return response.data.data.url;\r\n            },\r\n          \r\n        },\r\n    }),[]);\r\n\r\n\r\n    const [params] = useSearchParams();\r\n    const postId = params.get('id');\r\n    const navigate = useNavigate();\r\n\r\n    const [content, setContent] = useState('');\r\n\r\n\r\n    const imageUrl = getValues('image');\r\n    const imageName = getValues('image_name');\r\n    //đã có image name k cần dùng regex\r\n    // const imageRegex =  /%2F(\\S+)\\?/gm.exec(imageUrl);\r\n    // const imageName = imageRegex?.length > 0 ? imageRegex[1]:'';\r\n\r\n    //hook\r\n    const { setImage, image, handleResetUpload, progress, handleSelectImage, handleDeleteImage } = useFirebaseImage(setValue, getValues, imageName, deletePostImage);\r\n    const watchStatus = watch(\"status\");\r\n    const watchHot = watch('hot');\r\n   \r\n\r\n\r\n\r\n\r\n    async function deletePostImage() {\r\n        const colRef = doc(db, 'posts', postId);\r\n        await updateDoc(colRef, {\r\n            image: '',\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        setImage(imageUrl);\r\n    }, [imageUrl, setImage])\r\n\r\n\r\n    const UpdatePostHandler = async (values) => {\r\n        if(!isValid) return; \r\n        const docRef = doc(db, 'posts', postId);\r\n        values.status = Number(values.status);\r\n        values.slug = slugify(values.slug || values.title, { lower: true });\r\n        await updateDoc(docRef, {\r\n            ...values,\r\n            image,\r\n            content,\r\n        });\r\n        toast.success('Update post successfully!')\r\n    }\r\n\r\n    //Lấy categories\r\n    const [categories, setCategories] = useState([]);\r\n    const [selectCategory, setSelectCategory] = useState('');\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const colRef = collection(db, \"categories\");\r\n            const q = query(colRef, where(\"status\", \"==\", 1));\r\n            const querySnapshot = await getDocs(q);\r\n            let result = [];\r\n            querySnapshot.forEach((doc) => {\r\n                // doc.data() is never undefined for query doc snapshots\r\n                result.push({\r\n                    id: doc.id,\r\n                    ...doc.data(),\r\n                });\r\n            });\r\n            console.log(\"getData ~ result\", result);\r\n            setCategories(result); \r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n\r\n    const handleClickOption = async (item) => {\r\n        const colRef = doc(db, 'categories', item.id);\r\n        const docData = await getDoc(colRef);\r\n        setValue('category', {\r\n            id: docData.id,\r\n            ...docData.data()\r\n        });\r\n        setSelectCategory(item);\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fecthData() {\r\n            if (!postId) return;\r\n            const docRef = doc(db, 'posts', postId);\r\n            const docSnapshot = await getDoc(docRef);\r\n            if (docSnapshot.data()) { //nếu có data thì hiển thị dữ liệu theo id\r\n                reset(docSnapshot.data());\r\n                setSelectCategory(docSnapshot.data()?.category || ''); //hiển thị categories đã được chọn \r\n                setContent(docSnapshot.data()?.content || '')\r\n            }\r\n        }\r\n        fecthData();\r\n    }, [postId, reset])\r\n\r\n    if (!postId) return null;\r\n    return (\r\n        <>\r\n            <DashboardHeading title=\"Update post\" desc={`Update your post ${postId}`}></DashboardHeading>\r\n            <form onSubmit={handleSubmit(UpdatePostHandler)}>\r\n                <div className=\"grid grid-cols-2 gap-x-10 mb-10\">\r\n                    <Field>\r\n                        <Label>Title</Label>\r\n                        <Input\r\n                            control={control}\r\n                            placeholder=\"Enter your title\"\r\n                            name=\"title\"\r\n                            required\r\n                        ></Input>\r\n                    </Field>\r\n                    <Field>\r\n                        <Label>Slug</Label>\r\n                        <Input\r\n                            control={control}\r\n                            placeholder=\"Enter your slug\"\r\n                            name=\"slug\"\r\n                        ></Input>\r\n                    </Field>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-x-10 mb-10\">\r\n                    <Field>\r\n                        <Label>Image</Label>\r\n                        <ImageUpload\r\n                            onChange={handleSelectImage}\r\n                            className=\"h-[250px]\"\r\n                            progress={progress}\r\n                            image={image}\r\n                            handleDeleteImage={handleDeleteImage}\r\n                        ></ImageUpload>\r\n                    </Field>\r\n\r\n                    <Field>\r\n                        <Label>Category</Label>\r\n                        <Dropdown>\r\n                            <Dropdown.Select placeholder='Select the category'></Dropdown.Select>\r\n                            {/* <Dropdown.Select placeholder={`${selectCategory.name || 'Select category'}`}></Dropdown.Select> */}\r\n                            <Dropdown.List>\r\n                                {categories.length > 0 && categories.map((item) => (\r\n                                    <Dropdown.Option key={item.id} onClick={() => handleClickOption(item)}>{item.name} </Dropdown.Option>\r\n                                )\r\n\r\n                                )}\r\n                            </Dropdown.List>\r\n                        </Dropdown>\r\n                        {selectCategory?.name && (\r\n                            <span className=\"inline-block p-3 rounded-lg bg-green-50 text-green-700  text-sm font-bold\">\r\n                                {selectCategory?.name}\r\n                            </span>\r\n                        )}\r\n                    </Field>\r\n\r\n                </div>\r\n                <div className=\"mb-10 entry-content\">\r\n                    <Field>\r\n\r\n                        <Label>Content</Label>\r\n                        <div className='w-full'>\r\n                            <ReactQuill modules={modules} theme=\"snow\" value={content} onChange={setContent} />\r\n                        </div>\r\n                    </Field>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-x-10 mb-10\">\r\n\r\n                    <Field>\r\n                        <Label>Feature Post</Label>\r\n                        <Toggle on={watchHot === true} onClick={() => setValue('hot', !watchHot)}></Toggle>\r\n                    </Field>\r\n\r\n                    <Field>\r\n                        <Label>Status</Label>\r\n                        <FieldCheckboxes>\r\n                            <Radio\r\n                                name=\"status\"\r\n                                control={control}\r\n                                checked={Number(watchStatus) === postStatus.APPROVED}\r\n                                value={postStatus.APPROVED}\r\n                            >\r\n                                Approved\r\n                            </Radio>\r\n                            <Radio\r\n                                name=\"status\"\r\n                                control={control}\r\n                                checked={Number(watchStatus) === postStatus.PENDING}\r\n                                value={postStatus.PENDING}\r\n                            >\r\n                                Pending\r\n                            </Radio>\r\n                            <Radio\r\n                                name=\"status\"\r\n                                control={control}\r\n                                checked={Number(watchStatus) === postStatus.REJECTED}\r\n                                value={postStatus.REJECTED}\r\n                            >\r\n                                Reject\r\n                            </Radio>\r\n                        </FieldCheckboxes>\r\n                    </Field>\r\n                </div>\r\n\r\n                <Button type=\"submit\" className=\"mx-auto w-[250px]\" isLoading={isSubmitting} disabled={isSubmitting}>\r\n                    Update post\r\n                </Button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostUpdate;"],"names":["Quill","ImageUploader","useForm","mode","defaultValues","title","slug","status","author","hot","image","category","user","control","handleSubmit","watch","setValue","getValues","reset","formState","isValid","isSubmitting","modules","useMemo","toolbar","header","list","imageUploader","upload","file","bodyFormData","FormData","append","axios","method","url","data","headers","response","useSearchParams","postId","get","useNavigate","useState","content","setContent","imageUrl","imageName","useFirebaseImage","setImage","progress","handleResetUpload","handleSelectImage","handleDeleteImage","watchStatus","watchHot","colRef","doc","db","updateDoc","useEffect","UpdatePostHandler","values","docRef","Number","slugify","lower","toast","categories","setCategories","selectCategory","setSelectCategory","collection","q","query","where","getDocs","querySnapshot","result","forEach","push","id","console","log","getData","handleClickOption","item","getDoc","docData","docSnapshot","fecthData","desc","onSubmit","className","I","placeholder","name","required","onChange","length","map","onClick","theme","value","on","checked","postStatus","type","isLoading","disabled"],"sourceRoot":""}