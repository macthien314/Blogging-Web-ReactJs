{"version":3,"file":"static/js/472.0a11f4f2.chunk.js","mappings":"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","sources":["module/post/PostAddNew.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"../../components/button\";\r\nimport { Field, FieldCheckboxes } from \"../../components/field\";\r\nimport { Input } from \"../../components/input\";\r\nimport { Label } from \"../../components/label\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Radio } from \"../../components/checkbox\";\r\nimport { Dropdown } from \"../../components/dropdown\";\r\nimport slugify from \"slugify\";\r\nimport { postStatus } from \"../../utils/constants\";\r\nimport ImageUpload from \"../../components/image/ImageUpLoad\";\r\nimport useFirebaseImage from \"../../hooks/useFirebaseImage\";\r\nimport Toggle from \"../../components/toggle/Toggle\";\r\nimport { addDoc, collection, doc, getDoc, getDocs, query, serverTimestamp, where } from \"firebase/firestore\";\r\nimport { db } from \"../../firebase-app/firebase-config\";\r\nimport { useAuth } from '../../contexts/auth-context'\r\nimport { toast } from \"react-toastify\";\r\nimport DashboardHeading from \"../dashboard/DashboardHeading\";\r\nconst PostAddNewStyles = styled.div``;\r\n\r\nconst PostAddNew = () => {\r\n  const { userInfo } = useAuth();\r\n  const { control, watch, setValue, handleSubmit, getValues, reset } = useForm({\r\n    mode: \"onChange\",\r\n    defaultValues: {\r\n      title: \"\",\r\n      slug: \"\",\r\n      status: 2,\r\n      author: \"\",\r\n      hot: false,\r\n      image: '',\r\n      category: {},\r\n      user: {}\r\n    },\r\n  });\r\n\r\n  const [categories, setCategories] = useState([]);\r\n  const [selectCategory, setSelectCategory] = useState('');\r\n  //hook\r\n  const { image, handleResetUpload, progress, handleSelectImage, handleDeleteImage } = useFirebaseImage(setValue, getValues);\r\n  const watchStatus = watch(\"status\");\r\n  const watchHot = watch('hot');\r\n  const [loading, setLoading] = useState(false);\r\n  // const watchCategory = watch(\"category\");\r\n\r\n\r\n\r\n  const addPostHandler = async (values) => {\r\n    setLoading(true);\r\n    try {\r\n      const cloneValues = { ...values };\r\n      cloneValues.slug = slugify(values.slug || values.title, { lower: true });\r\n      cloneValues.status = Number(values.status);\r\n      const colRef = collection(db, 'posts');\r\n      await addDoc(colRef, {\r\n        ...cloneValues,\r\n        image,\r\n        createAt: serverTimestamp(),\r\n        // title: cloneValues.title,\r\n        // slug: cloneValues.slug,\r\n        // hot: cloneValues.hot,\r\n        // status: cloneValues.status,\r\n        // categoryId: cloneValues.categoryId\r\n      });\r\n      toast.success('Create new post successfully!');\r\n      reset({\r\n        title: \"\",\r\n        slug: \"\",\r\n        status: 2,\r\n        hot: false,\r\n        image: \"\",\r\n        category: {},\r\n        user: {}\r\n      });\r\n      handleResetUpload();\r\n      setSelectCategory({});\r\n\r\n    } catch (error) {\r\n      setLoading(false);\r\n    }\r\n\r\n    finally {\r\n      setLoading(false);\r\n    }\r\n\r\n  };\r\n\r\n  //lưu object user trong database post\r\n  useEffect(() => {\r\n    async function fetchUserData() {\r\n      if (!userInfo.email) return\r\n      const q = query(collection(db, 'users'), where('email', '==', userInfo.email));\r\n      const querySnapshot = await getDocs(q);\r\n      querySnapshot.forEach(doc => {\r\n        setValue('user', {\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        });\r\n      });\r\n    }\r\n    fetchUserData();\r\n  }, [userInfo.email])\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      const colRef = collection(db, \"categories\");\r\n      const q = query(colRef, where(\"status\", \"==\", 1));\r\n      const querySnapshot = await getDocs(q);\r\n      let result = [];\r\n      querySnapshot.forEach((doc) => {\r\n        // doc.data() is never undefined for query doc snapshots\r\n        result.push({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        });\r\n      });\r\n      console.log(\"getData ~ result\", result);\r\n      setCategories(result);\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    document.title = 'Monkey Blogging - Add new post';\r\n\r\n  }, []);\r\n\r\n  //lưu object category trong database post\r\n  const handleClickOption = async (item) => {\r\n    const colRef = doc(db, 'categories', item.id);\r\n    const docData = await getDoc(colRef);\r\n    setValue('category', {\r\n      id: docData.id,\r\n      ...docData.data()\r\n    });\r\n    setSelectCategory(item);\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <PostAddNewStyles>\r\n      <DashboardHeading title=\"Add post\" desc=\"Add new post\"></DashboardHeading>\r\n      <form onSubmit={handleSubmit(addPostHandler)}>\r\n        <div className=\"grid grid-cols-2 gap-x-10 mb-10\">\r\n          <Field>\r\n            <Label>Title</Label>\r\n            <Input\r\n              control={control}\r\n              placeholder=\"Enter your title\"\r\n              name=\"title\"\r\n              required\r\n            ></Input>\r\n          </Field>\r\n          <Field>\r\n            <Label>Slug</Label>\r\n            <Input\r\n              control={control}\r\n              placeholder=\"Enter your slug\"\r\n              name=\"slug\"\r\n            ></Input>\r\n          </Field>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-2 gap-x-10 mb-10\">\r\n          <Field>\r\n            <Label>Image</Label>\r\n            <ImageUpload\r\n              onChange={handleSelectImage}\r\n              className=\"h-[250px]\"\r\n              progress={progress}\r\n              image={image}\r\n              handleDeleteImage={handleDeleteImage}\r\n            ></ImageUpload>\r\n          </Field>\r\n\r\n          <Field>\r\n            <Label>Category</Label>\r\n            <Dropdown>\r\n              <Dropdown.Select placeholder='Select the category'></Dropdown.Select>\r\n              {/* <Dropdown.Select placeholder={`${selectCategory.name || 'Select category'}`}></Dropdown.Select> */}\r\n              <Dropdown.List>\r\n                {categories.length > 0 && categories.map((item) => (\r\n                  <Dropdown.Option key={item.id} onClick={() => handleClickOption(item)}>{item.name} </Dropdown.Option>\r\n                )\r\n\r\n                )}\r\n              </Dropdown.List>\r\n            </Dropdown>\r\n            {selectCategory?.name && (\r\n              <span className=\"inline-block p-3 rounded-lg bg-green-50 text-green-700  text-sm font-bold\">\r\n                {selectCategory?.name}\r\n              </span>\r\n            )}\r\n          </Field>\r\n\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-2 gap-x-10 mb-10\">\r\n\r\n          <Field>\r\n            <Label>Feature Post</Label>\r\n            <Toggle on={watchHot === true} onClick={() => setValue('hot', !watchHot)}></Toggle>\r\n          </Field>\r\n\r\n          <Field>\r\n            <Label>Status</Label>\r\n            <FieldCheckboxes>\r\n              <Radio\r\n                name=\"status\"\r\n                control={control}\r\n                checked={Number(watchStatus) === postStatus.APPROVED}\r\n                value={postStatus.APPROVED}\r\n              >\r\n                Approved\r\n              </Radio>\r\n              <Radio\r\n                name=\"status\"\r\n                control={control}\r\n                checked={Number(watchStatus) === postStatus.PENDING}\r\n                value={postStatus.PENDING}\r\n              >\r\n                Pending\r\n              </Radio>\r\n              <Radio\r\n                name=\"status\"\r\n                control={control}\r\n                checked={Number(watchStatus) === postStatus.REJECTED}\r\n                value={postStatus.REJECTED}\r\n              >\r\n                Reject\r\n              </Radio>\r\n            </FieldCheckboxes>\r\n          </Field>\r\n        </div>\r\n\r\n        <Button type=\"submit\" className=\"mx-auto w-[250px]\" isLoading={loading} disabled={loading}>\r\n          Add new post\r\n        </Button>\r\n      </form>\r\n    </PostAddNewStyles>\r\n  );\r\n};\r\n\r\nexport default PostAddNew;\r\n"],"names":["PostAddNewStyles","styled","userInfo","useAuth","useForm","mode","defaultValues","title","slug","status","author","hot","image","category","user","control","watch","setValue","handleSubmit","getValues","reset","useState","categories","setCategories","selectCategory","setSelectCategory","useFirebaseImage","handleResetUpload","progress","handleSelectImage","handleDeleteImage","watchStatus","watchHot","loading","setLoading","addPostHandler","values","cloneValues","slugify","lower","Number","colRef","collection","db","addDoc","createAt","serverTimestamp","toast","useEffect","email","q","query","where","getDocs","forEach","doc","id","data","fetchUserData","querySnapshot","result","push","console","log","getData","document","handleClickOption","item","getDoc","docData","desc","onSubmit","className","I","placeholder","name","required","onChange","length","map","onClick","on","checked","postStatus","value","type","isLoading","disabled"],"sourceRoot":""}